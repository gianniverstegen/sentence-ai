{"version":3,"sources":["geneticAlgorithm/numberToCharacter.js","geneticAlgorithm/getNewPopulation.js","geneticAlgorithm/geneticAlgorithm.js","components/InputBox.js","components/GenerationResultBox.js","useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["dictionary","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","numberToCharacter","number","getChild","relativeChance","mutation","randomNumber1","Math","random","randomNumber2","parent1","undefined","parent2","i","length","_mutateChild","slice","round","child","mutatedCell","floor","substr","getNewPopulation","oldPopulation","populationAmount","newPopulation","totalFitness","sum","push","newChildren","_removeOddCharacters","string","new_string","geneticAlgorithm","sentence","targetSentence","amountOfNeurons","currentPopulation","initialPopulation","chromosone","neuronNumber","neuron","join","getInitialPopulation","population","evaluatedPopulation","amountRight","j","charAt","fitness","getFitness","sort","a","b","InputBox","generateSentences","generationNumber","useState","value","currentSentence","setIntermediateSentence","id","autoComplete","type","name","onChange","event","target","onClick","GenerationResultBox","currentGeneration","topSentences","topFitness","map","element","IDX","className","useInterval","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","App","isRunning","globalState","setSentence","setGeneration","setGenerationNumber","setRunning","newGeneration","window","addEventListener","e","stopImmediatePropagation","key","stopTheLoop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b75a87b.chunk.js","sourcesContent":["function numberToCharacter(number) {\n  let correspondingLetter = dictionary[number];\n  return correspondingLetter;\n}\n\n// 0-90 test whether the last character can show up in the Math.round\nconst dictionary = {\n  0: \"a\",\n  1: \"A\",\n  2: \"b\",\n  3: \"B\",\n  4: \"c\",\n  5: \"C\",\n  6: \"d\",\n  7: \"D\",\n  8: \"e\",\n  9: \"E\",\n  10: \"f\",\n  11: \"F\",\n  12: \"g\",\n  13: \"G\",\n  14: \"h\",\n  15: \"H\",\n  16: \"i\",\n  17: \"I\",\n  18: \"j\",\n  19: \"J\",\n  20: \"k\",\n  21: \"K\",\n  22: \"l\",\n  23: \"L\",\n  24: \"m\",\n  25: \"M\",\n  26: \"n\",\n  27: \"N\",\n  28: \"o\",\n  29: \"O\",\n  30: \"p\",\n  31: \"P\",\n  32: \"q\",\n  33: \"Q\",\n  34: \"r\",\n  35: \"R\",\n  36: \"s\",\n  37: \"S\",\n  38: \"t\",\n  39: \"T\",\n  40: \"u\",\n  41: \"U\",\n  42: \"v\",\n  43: \"V\",\n  44: \"w\",\n  45: \"W\",\n  46: \"x\",\n  47: \"X\",\n  48: \"y\",\n  49: \"Y\",\n  50: \"z\",\n  51: \"Z\",\n  52: \"0\",\n  53: \"1\",\n  54: \"2\",\n  55: \"3\",\n  56: \"4\",\n  57: \"5\",\n  58: \"6\",\n  59: \"7\",\n  60: \"8\",\n  61: \"9\",\n  62: \"$\",\n  63: \" \",\n  64: \",\",\n  65: \"-\",\n  66: \"(\",\n  67: \")\",\n  68: \".\",\n  69: \"'\",\n  70: '\"',\n  71: \"?\",\n  72: \":\",\n  73: \"!\",\n  74: \" \",\n  75: \" \",\n};\n\nexport default numberToCharacter;\n","import numberToCharacter from \"./numberToCharacter\";\n\nfunction getNewPopulation(oldPopulation, populationAmount, mutation) {\n  // This function is responsible for generating a new population based on the previous' fitness\n\n  let newPopulation = [];\n  let totalFitness = 0;\n\n  for (let i = 0; i < oldPopulation.length; i++) {\n    // calculating total fitness\n    totalFitness += oldPopulation[i][1];\n  }\n\n  let sum = 0;\n  let relativeChance = [[0]];\n  for (let i = 0; i < oldPopulation.length; i++) {\n    // giving each sentence a cumulative chance based on their fitness\n    sum += oldPopulation[i][1] / totalFitness;\n    relativeChance.push([sum, oldPopulation[i][0]]);\n  }\n\n  while (newPopulation.length < populationAmount) {\n    // making the new population\n    let newChildren = getChild(relativeChance, mutation);\n    newPopulation.push([newChildren[0]]);\n    newPopulation.push([newChildren[1]]);\n  }\n\n  return newPopulation;\n}\n\nfunction getChild(relativeChance, mutation) {\n  // generating two random numbers\n  let randomNumber1 = Math.random();\n  let randomNumber2 = Math.random();\n  let parent1 = undefined;\n  let parent2 = undefined;\n\n  for (let i = 1; i < relativeChance.length; i++) {\n    // finding out which random number belongs to which sentence\n    if (\n      randomNumber1 < relativeChance[i][0] &&\n      randomNumber1 > relativeChance[i - 1][0]\n    ) {\n      parent1 = relativeChance[i][1];\n      if (parent2 !== undefined) break;\n      // if both parents have a sentence assigned, we can break\n    }\n    if (\n      randomNumber2 < relativeChance[i][0] &&\n      randomNumber2 > relativeChance[i - 1][0]\n    ) {\n      parent2 = relativeChance[i][1];\n      if (parent1 !== undefined) break;\n      // if both parents have a sentence assigned, we can break\n    }\n  }\n\n  // crossing over the two parents to get two children, and maybe mutating them\n  let child1 = _mutateChild(\n    parent1.slice(0, Math.round(parent1.length / 2)) +\n      parent2.slice(Math.round(parent1.length / 2)),\n    mutation\n  );\n  let child2 = _mutateChild(\n    parent2.slice(0, Math.round(parent1.length / 2)) +\n      parent1.slice(Math.round(parent1.length / 2)),\n    mutation\n  );\n\n  return [child1, child2];\n}\n\nfunction _mutateChild(child, mutation) {\n  for (let i = 0; i < child.length; i++) {\n    if (Math.random() < mutation) {\n      let mutatedCell = numberToCharacter(Math.floor(Math.random() * 75));\n      child =\n        child.substr(0, i) + mutatedCell + child.substr(i + 1, child.length);\n    }\n  }\n  return child;\n}\n\nexport default getNewPopulation;\n","import numberToCharacter from \"./numberToCharacter\";\nimport getNewPopulation from \"./getNewPopulation\";\n\nfunction geneticAlgorithm(sentence, populationAmount, mutation, oldPopulation) {\n  const targetSentence = sentence;\n  const amountOfNeurons = targetSentence.length;\n  var currentPopulation = undefined;\n\n  // Old population things\n  if (oldPopulation === undefined) {\n    currentPopulation = getInitialPopulation(populationAmount, amountOfNeurons);\n  } else {\n    let untreatedOldPopulation = oldPopulation;\n    currentPopulation = getNewPopulation(\n      untreatedOldPopulation,\n      populationAmount,\n      mutation\n    );\n    // console.log(currentPopulation);\n  }\n\n  // treat the current population\n  let evaluatedPopulation = getFitness(currentPopulation, targetSentence);\n  let sorted_population = sort_object(evaluatedPopulation);\n  // let newPopulation = getNewPopulation(sorted_population, populationAmount); // This function is here for testing\n  return sorted_population;\n}\n\nfunction getFitness(population, targetSentence) {\n  for (let i = 0; i < population.length; i++) {\n    let amountRight = 0;\n    for (let j = 0; j < population[i][0].length; j++) {\n      if (population[i][0].charAt(j) === targetSentence.charAt(j)) {\n        amountRight += 1;\n      }\n    }\n    let fitness =\n      Math.round((amountRight / targetSentence.length) * 1000) / 1000;\n    population[i].push(fitness);\n  }\n  return population;\n}\n\nfunction sort_object(population) {\n  population.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  return population;\n}\n\nfunction getInitialPopulation(populationAmount, amountOfNeurons) {\n  const initialPopulation = [];\n  for (let i = 0; i < populationAmount; i++) {\n    let chromosone = [];\n    for (let i = 0; i < amountOfNeurons; i++) {\n      let neuronNumber = Math.floor(Math.random() * 75);\n      // 62 alphanumeric (A-Z, a-z, 0-9) and 28 special characters\n      let neuron = numberToCharacter(neuronNumber);\n      chromosone.push(neuron);\n    }\n    chromosone = chromosone.join();\n    chromosone = _removeOddCharacters(chromosone);\n    initialPopulation.push([chromosone]);\n  }\n  return initialPopulation;\n}\n\nfunction _removeOddCharacters(string) {\n  var new_string = \"\";\n  for (let i = 0; i < string.length; i++) {\n    if (i % 2 === 1) continue;\n    new_string += string[i];\n  }\n  return new_string;\n}\n\nexport default geneticAlgorithm;\n","import React, { useState } from \"react\";\n\nconst InputBox = ({ generateSentences, generationNumber, targetSentence }) => {\n  const [currentSentence, setIntermediateSentence] = useState({ value: \"\" });\n  function setTargetSentence(event) {\n    setIntermediateSentence({ value: event.target.value });\n  }\n\n  return (\n    <div id=\"inputBox\">\n      <form>\n        <input\n          autoComplete=\"off\"\n          type=\"text\"\n          name=\"targetSentence\"\n          onChange={setTargetSentence}\n        />\n      </form>\n      <button onClick={() => generateSentences(currentSentence.value)}>\n        GO\n      </button>\n      <div id=\"generationAmountDisplayer\">\n        Current Generation: {generationNumber}\n      </div>\n      <div id=\"infoBox\">\n        Using a population of a thousand, approximately{\" \"}\n        {generationNumber * 1000} possible sentences were considered.{\"\"}\n      </div>\n    </div>\n  );\n};\n\nexport default InputBox;\n","import React from \"react\";\n\nconst GenerationResultBox = ({ currentGeneration }) => {\n  const topSentences = [];\n  const topFitness = [];\n\n  if (currentGeneration !== undefined) {\n    for (let i = 0; i < 20; i++) {\n      topSentences.push(currentGeneration[i][0]);\n      topFitness.push(currentGeneration[i][1]);\n    }\n  }\n\n  return (\n    <div id=\"generationResultBox\">\n      <div id=\"topSentenceBlock\">\n        {topSentences.map((element, IDX) => {\n          return (\n            <div className=\"topSentence\" key={IDX} id={`${IDX}-element`}>\n              {element}\n            </div>\n          );\n        })}\n      </div>\n      <div id=\"topFitnessBlock\">\n        {topFitness.map((element, IDX) => {\n          return (\n            <div className=\"topFitness\" key={IDX} id={`${IDX}-element`}>\n              {element}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default GenerationResultBox;\n","import { useEffect, useRef } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from \"react\";\nimport geneticAlgorithm from \"./geneticAlgorithm/geneticAlgorithm\";\nimport InputBox from \"./components/InputBox\";\nimport GenerationInputBox from \"./components/GenerationResultBox\";\nimport useInterval from \"./useInterval\";\n\nfunction App() {\n  const [globalState, setState] = useState({\n    isRunning: false,\n    populationAmount: 1000,\n    mutation: 0.01,\n  });\n\n  const [targetSentence, setSentence] = useState({ value: \"\" });\n  const [currentGeneration, setGeneration] = useState(undefined);\n  const [generationNumber, setGenerationNumber] = useState(0);\n  const [isRunning, setRunning] = useState(false);\n\n  function generateSentences(sentence) {\n    setSentence({ value: sentence });\n    setGenerationNumber(1);\n    let currentGeneration = geneticAlgorithm(\n      sentence,\n      globalState.populationAmount,\n      globalState.mutation,\n      undefined\n    );\n    setGeneration(currentGeneration);\n    setRunning(true);\n  }\n\n  useInterval(\n    () => {\n      if (currentGeneration[0][0] === targetSentence.value) setRunning(false);\n      else {\n        let newGeneration = geneticAlgorithm(\n          targetSentence.value,\n          globalState.populationAmount,\n          globalState.mutation,\n          currentGeneration\n        );\n        setGeneration(newGeneration);\n        let currentGenerationNumber = generationNumber + 1;\n        setGenerationNumber(currentGenerationNumber);\n      }\n    },\n    isRunning ? 40 : null\n  );\n\n  useEffect(() => {\n    // Listens to keyinput\n    window.addEventListener(\"keypress\", (e) => {\n      e.stopImmediatePropagation();\n      stopTheLoop(e);\n    });\n  });\n\n  function stopTheLoop(e) {\n    if (e.key === \"s\") {\n      setRunning(false);\n    }\n  }\n  // use setInterval maybe\n  // while (currentGeneration[0][0] !== sentence) {\n  //   let newGeneration = geneticAlgorithm(\n  //     sentence,\n  //     globalState.populationAmount,\n  //     globalState.mutation,\n  //     currentGeneration\n  //   );\n  //   currentGeneration = newGeneration;\n  // }\n  // setGeneration(currentGeneration);\n\n  return (\n    <div className=\"App\">\n      <InputBox\n        generateSentences={generateSentences}\n        generationNumber={generationNumber}\n        targetSentence={targetSentence}\n      />\n      <GenerationInputBox\n        currentGeneration={\n          currentGeneration === undefined\n            ? undefined\n            : currentGeneration.slice(0, 20)\n        }\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}